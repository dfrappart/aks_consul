#Pipeline name

name: '07_Consul_Apply'


#Parameters for the pipeline

# CD Trigger

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - Terraformconfig/03_Consul/*

# Job Workers config

pool:
  vmImage: 'ubuntu-latest'

# Variables for the job

variables:
- group: ConsulLab
- group: ConsulLabKV

# Stages

stages:
  - stage: terraform_plan_stage
    jobs: 
    - job: terraform_plan
      continueOnError: false
      # Job step
      steps:
      
      - script: |
         echo Getting Terraform
         echo "Building TFURI for DL"
         echo "current terraform version is $TFVer"
         export TFuri1="https://releases.hashicorp.com/terraform/$TFVer/terraform_"
         export TFuriTemp=$TFuri1$TFVer
         export TFuriend="_linux_amd64.zip"
         export TFuri=$TFuriTemp$TFuriend
         echo "TFDL URI is $TFuri"
         wget $TFuri
         
         echo "building TFZip name"
         export TFZip1="terraform_"
         export TFZipEnd="_linux_amd64.zip"
         export TFZipTemp=$TFZip1$TFVer
         export ZIPName=$TFZipTemp$TFZipEnd
         echo "Zip name is $ZIPName"
         unzip -a $ZIPName
         
         sudo mv ./terraform /usr/local/bin/terraform
         
         terraform version
         
        displayName: 'Download and update Terraform'
        env:
          TFVer: $(TFVer)
      
      - script: |
         echo '######################################################'   
         echo 'Init and plan Terraform'
         echo '######################################################'
         echo
         echo '######################################################'    
         echo 'Init Terraform'
         echo
         terraform init \
         -backend-config="key=${key}" \
         -backend-config="access_key=${access_key}" \
         -backend-config="container_name=${container_name}" \
         -backend-config="storage_account_name=${storage_account_name}" \
         -no-color
         echo 'State is stored in:'${key}
         echo
         echo '######################################################'
         echo 'check terraform'
         terraform version
         echo
         echo 'terraform plan'
         terraform plan \
         -var SubsetupAccessKey=${access_key} \
         -var SubsetupKey=${SubsetupKey} \
         -var SubsetupContainerName=${container_name} \
         -var SubsetupSTOAName=${storage_account_name} \
         -var InfrasetupSTOAName=${storage_account_name} \
         -var InfraSetupContainerName=${container_name} \
         -var InfraSetupKey=${InfraKey} \
         -var InfraSetupAccessKey=${access_key} \
         -var AKSSetupSTOAName=${storage_account_name} \
         -var AKSSetupContainerName=${container_name} \
         -var AKSSetupKey=${AKSKey} \
         -var AKSSetupAccessKey=${access_key} \
         -var AzureTenantID=${AzureTenantID} \
         -var AzureClientSecret=${AzureClientSecret} \
         -var AzureClientID=${AzureClientID} \
         -var AzureSubscriptionID=${AzureSubscriptionID} \
    
        workingDirectory: 'Terraformconfig/03_Consul'
        displayName: 'Terraform init & Plan'
        env:
          AzureClientID: $(TFId)
          AzureClientSecret: $(TFSecret)
          AzureSubscriptionID: $(SubscriptionId)
          AzureTenantID: $(TenantId)
          key: $(ConsulState)
          access_key: $(TFStateSTOAK)
          container_name: $(StateContainerName)
          storage_account_name: $(StateSTAName)
          SubsetupKey: $(SubSetupState)
          InfraKey: $(InfraState)
          AKSKey: $(AKSState)

    - job: terraform_scan
      continueOnError: false
      # Job step
      steps:

      - script: |
         echo Getting Checkov

         sudo apt update
         sudo apt install software-properties-common
         sudo add-apt-repository ppa:deadsnakes/ppa
         sudo apt install python3.7
         sudo apt install python3-pip
         sudo python3.7 -m pip install -U checkov #to install or upgrade checkov)
         
        displayName: 'Install Checkov'

      - script: |
         echo '######################################################'   
         echo 'Checkov scan in directory '
         echo '######################################################'
         echo
         checkov -d . --quiet --soft-fail
    
        workingDirectory: 'Terraformconfig/03_Consul'
        displayName: 'Checkov Scan'

      - script: |
         echo Getting tfsec
         wget https://aquasecurity.github.io/tfsec/v1.0.2/assets/signing.asc
         wget https://github.com/aquasecurity/tfsec/releases/download/v1.1.3/tfsec-linux-amd64
         wget https://github.com/aquasecurity/tfsec/releases/download/v1.1.3/tfsec-checkgen-linux-arm64.D66B222A3EA4C25D5D1A097FC34ACEFB46EC39CE.sig
         cat signing.asc > /tmp/tfsec_key.txt
         gpg --import < /tmp/tfsec_key.txt
         gpg --list-keys signing@tfsec.dev
         sudo install tfsec-linux-amd64 /usr/local/bin/tfsec 
         
        displayName: 'Install tfsec'
      - script: |
         echo '######################################################'   
         echo 'tfsec scan in directory '
         echo '######################################################'
         echo
         tfsec . -s --exclude-downloaded-modules
        workingDirectory: 'Terraformconfig/03_Consul'
        displayName: 'tfsec Scan'

  - stage: terraform_checkov_scan_stage
    jobs: 
    - job: checkov_scan
      continueOnError: false
      # Job step
      steps:
      - script: |
         echo Getting Checkov

         sudo apt update
         sudo apt install software-properties-common
         sudo add-apt-repository ppa:deadsnakes/ppa
         sudo apt install python3.7
         sudo apt install python3-pip
         sudo python3.7 -m pip install -U checkov #to install or upgrade checkov)
         
        displayName: 'Install Checkov'

      - script: |
         echo '######################################################'   
         echo 'Checkov scan in directory '
         echo '######################################################'
         echo
         checkov -d . --quiet --soft-fail
    
        workingDirectory: 'Terraformconfig/03_Consul'
        displayName: 'Checkov Scan'

  - stage: terraform_tfsec_scan_stage
    jobs: 
    - job: tfsec_scan
      continueOnError: false
      # Job step
      steps:

      - script: |
         echo Getting tfsec
         wget https://aquasecurity.github.io/tfsec/v1.0.2/assets/signing.asc
         wget https://github.com/aquasecurity/tfsec/releases/download/v1.1.3/tfsec-linux-amd64
         wget https://github.com/aquasecurity/tfsec/releases/download/v1.1.3/tfsec-checkgen-linux-arm64.D66B222A3EA4C25D5D1A097FC34ACEFB46EC39CE.sig
         cat signing.asc > /tmp/tfsec_key.txt
         gpg --import < /tmp/tfsec_key.txt
         gpg --list-keys signing@tfsec.dev
         sudo install tfsec-linux-amd64 /usr/local/bin/tfsec 
         
        displayName: 'Install tfsec'
        
      - script: |
         echo '######################################################'   
         echo 'tfsec scan in directory '
         echo '######################################################'
         echo
         tfsec . -s --exclude-downloaded-modules
        workingDirectory: 'Terraformconfig/03_Consul'
        displayName: 'tfsec Scan'


  - stage: terraform_apply_stage
    dependsOn: terraform_plan_stage
    condition: succeeded()
    jobs: 

    - job: waitForValidation
      displayName: Wait for external validation
      pool: server
      timeoutInMinutes: 10 
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 3 
        inputs:
          notifyUsers: |
            david@teknews.cloud
          instructions: 'Please validate the build configuration and resume'
          onTimeout: 'reject'

    - job: terraform_apply
      dependsOn: waitForValidation
      continueOnError: false
      # Job step
      steps:
      
      - script: |
         echo Getting Terraform
         echo "Building TFURI for DL"
         echo "current terraform version is $TFVer"
         export TFuri1="https://releases.hashicorp.com/terraform/$TFVer/terraform_"
         export TFuriTemp=$TFuri1$TFVer
         export TFuriend="_linux_amd64.zip"
         export TFuri=$TFuriTemp$TFuriend
         echo "TFDL URI is $TFuri"
         wget $TFuri
         
         echo "building TFZip name"
         export TFZip1="terraform_"
         export TFZipEnd="_linux_amd64.zip"
         export TFZipTemp=$TFZip1$TFVer
         export ZIPName=$TFZipTemp$TFZipEnd
         echo "Zip name is $ZIPName"
         unzip -a $ZIPName
         
         sudo mv ./terraform /usr/local/bin/terraform
         
         terraform version
         
        displayName: 'Download and update Terraform'
        env:
          TFVer: $(TFVer)
      
      - script: |
         echo '######################################################'   
         echo 'Init and plan Terraform'
         echo '######################################################'
         echo
         echo '######################################################'    
         echo 'Init Terraform'
         echo
         terraform init \
         -backend-config="key=${key}" \
         -backend-config="access_key=${access_key}" \
         -backend-config="container_name=${container_name}" \
         -backend-config="storage_account_name=${storage_account_name}" \
         -no-color
         echo 'State is stored in:'${key}
         echo
         echo '######################################################'
         echo 'check terraform'
         terraform version
         echo
         echo
         echo 'terraform apply'
         terraform apply \
         -var SubsetupAccessKey=${access_key} \
         -var SubsetupKey=${SubsetupKey} \
         -var SubsetupContainerName=${container_name} \
         -var SubsetupSTOAName=${storage_account_name} \
         -var InfrasetupSTOAName=${storage_account_name} \
         -var InfraSetupContainerName=${container_name} \
         -var InfraSetupKey=${InfraKey} \
         -var InfraSetupAccessKey=${access_key} \
         -var AKSSetupSTOAName=${storage_account_name} \
         -var AKSSetupContainerName=${container_name} \
         -var AKSSetupKey=${AKSKey} \
         -var AKSSetupAccessKey=${access_key} \
         -var AzureTenantID=${AzureTenantID} \
         -var AzureClientSecret=${AzureClientSecret} \
         -var AzureClientID=${AzureClientID} \
         -var AzureSubscriptionID=${AzureSubscriptionID} -auto-approve
    
        workingDirectory: 'Terraformconfig/03_Consul'
        displayName: 'Terraform init & apply'
        env:
          AzureClientID: $(TFId)
          AzureClientSecret: $(TFSecret)
          AzureSubscriptionID: $(SubscriptionId)
          AzureTenantID: $(TenantId)
          key: $(ConsulState)
          access_key: $(TFStateSTOAK)
          container_name: $(StateContainerName)
          storage_account_name: $(StateSTAName)
          SubsetupKey: $(SubSetupState)
          InfraKey: $(InfraState)
          AKSKey: $(AKSState)


